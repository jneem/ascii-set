var searchIndex = {};
searchIndex['ascii_set'] = {"items":[[0,"","ascii_set","",null,null],[3,"AsciiSet","","Provides a fast method for testing character membership of a purely ASCII set.",null,null],[12,"lo_mask","","The bitmask representing characters 0 through 63. If `c <= 63` and `(lo_mask >> c) & 1 ==\n1` then the ASCII codepoint `c` belongs to this set.",0,null],[12,"hi_mask","","The bitmask representing characters 64 through 127.",0,null],[11,"clone","","",0,{"inputs":[{"name":"asciiset"}],"output":{"name":"asciiset"}}],[11,"fmt","","",0,{"inputs":[{"name":"asciiset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",0,null],[11,"eq","","",0,{"inputs":[{"name":"asciiset"},{"name":"asciiset"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"asciiset"},{"name":"asciiset"}],"output":{"name":"bool"}}],[11,"contains_char","","Tests whether this set contains the char `c`.",0,{"inputs":[{"name":"asciiset"},{"name":"char"}],"output":{"name":"bool"}}],[11,"contains_byte","","Tests whether this set contains the byte `c`.",0,{"inputs":[{"name":"asciiset"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"insert_byte","","Adds a byte to this set.",0,{"inputs":[{"name":"asciiset"},{"name":"u8"}],"output":null}],[11,"insert_char","","Adds a char to this set.",0,{"inputs":[{"name":"asciiset"},{"name":"char"}],"output":null}],[11,"new","","Creates a new, empty, `AsciiSet`.",0,{"inputs":[{"name":"asciiset"}],"output":{"name":"asciiset"}}],[11,"from_ranges","","Builds an `AsciiSet` as a union of ranges (which are inclusive).",0,{"inputs":[{"name":"asciiset"},{"name":"i"}],"output":{"name":"asciiset"}}],[11,"from_fn","","Builds the `AsciiSet` consisting of all characters for which `f` returns `true`.",0,{"inputs":[{"name":"asciiset"},{"name":"f"}],"output":{"name":"asciiset"}}],[11,"from_chars","","Builds the `AsciiSet` consisting of all characters yielded by `iter`.",0,{"inputs":[{"name":"asciiset"},{"name":"i"}],"output":{"name":"asciiset"}}],[11,"union","","Returns the union of this set and `other`.\n# Examples\n```\nuse ascii_set::AsciiSet;\nassert_eq!(\n    AsciiSet::letters(),\n    AsciiSet::upper_case_letters().union(&AsciiSet::lower_case_letters()));\n```",0,{"inputs":[{"name":"asciiset"},{"name":"asciiset"}],"output":{"name":"asciiset"}}],[11,"intersection","","Returns the intersection of this set and `other`.",0,{"inputs":[{"name":"asciiset"},{"name":"asciiset"}],"output":{"name":"asciiset"}}],[11,"difference","","Returns the set of chars in `self` but not `other`.",0,{"inputs":[{"name":"asciiset"},{"name":"asciiset"}],"output":{"name":"asciiset"}}],[11,"complement","","Returns the set of all ASCII chars not in `self`.",0,{"inputs":[{"name":"asciiset"}],"output":{"name":"asciiset"}}],[11,"lower_case_letters","","Returns the set of all lower case letters.",0,{"inputs":[{"name":"asciiset"}],"output":{"name":"asciiset"}}],[11,"upper_case_letters","","Returns the set of all upper case letters.",0,{"inputs":[{"name":"asciiset"}],"output":{"name":"asciiset"}}],[11,"letters","","Returns the set of all letters.",0,{"inputs":[{"name":"asciiset"}],"output":{"name":"asciiset"}}],[11,"digits","","Returns the set of all digits.",0,{"inputs":[{"name":"asciiset"}],"output":{"name":"asciiset"}}]],"paths":[[3,"AsciiSet"]]};
initSearch(searchIndex);
